name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  USER: "mohamadsallakhou"
  IMAGE: ghcr.io/${{ github.actor }}/heybot:${{ github.sha }}

jobs:
  # 1) Build + Push Base-Image
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU (für Multi-Arch Builds, optional)
        uses: docker/setup-qemu-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build Docker image
        run: docker build -t $IMAGE .

      - name: Push Docker image
        run: docker push $IMAGE

      - name: Upload image name for downstream jobs
        uses: actions/upload-artifact@v2
        with:
          name: image-info
          path: |
            <<EOF
            IMAGE=${IMAGE}
            EOF

  # 2) Test
  test:
    name: Run Python Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install deps
        run: pip install -r requirements.txt
      - name: Pytest
        run: pytest --junitxml=pytest-report.xml
      - name: Upload test report
        uses: actions/upload-artifact@v2
        with:
          name: pytest-report
          path: pytest-report.xml

  # 3) Security-Scans: Trivy + OWASP Dependency-Check
  security:
    name: Security Scans
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Download image-info
        uses: actions/download-artifact@v2
        with:
          name: image-info

      - name: Load IMAGE variable
        run: source image-info

      # Trivy
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          version: '0.60.1'

      - name: Trivy Scan (HIGH/CRITICAL)
        run: trivy image --exit-code 1 --severity HIGH,CRITICAL --format json --output trivy-report.json $IMAGE

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v2
        with:
          name: trivy-report
          path: trivy-report.json

      # OWASP Dependency-Check
      - name: Run OWASP Dependency-Check
        uses: jeremylong/DependencyCheck-action@v2
        with:
          project: "heybot"
          scanPath: "."
          format: "ALL"
      - name: Upload Dependency-Check Report
        uses: actions/upload-artifact@v2
        with:
          name: owasp-report
          path: dependency-check-report.*

  # 4) Deploy via ArgoCD
  deploy:
    name: Deploy to Kubernetes via ArgoCD
    runs-on: ubuntu-latest
    needs:
      - security
      - test
    if: github.ref == 'refs/heads/main' && needs.security.result == 'success'
    steps:
      - name: Install ArgoCD CLI
        run: |
          VERSION=$(curl -sSL https://api.github.com/repos/argoproj/argo-cd/releases/latest \
            | grep tag_name | cut -d '"' -f4)
          curl -sSL -o /usr/local/bin/argocd \
            https://github.com/argoproj/argo-cd/releases/download/${VERSION}/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      - name: Login to ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          argocd login $ARGOCD_SERVER --token $ARGOCD_TOKEN --insecure

      - name: Sync Application
        run: argocd app sync neu-heybotchat

  # 5) (Optional) Scheduled KI-Analyse für Runtime-Metriken
  metrics-alert:
    name: KI-Metrik-Analyse & Alerts
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: pip install prometheus-client requests ollama-client
      - name: Fetch & Analyze Metrics
        run: |
          python scripts/analyze_metrics.py \
            --prometheus-url https://prometheus.prod.svc:9090 \
            --ollama-url ${{ secrets.OLLAMA_API_URL }} \
            --discord-webhook ${{ secrets.DISCORD_WEBHOOK }}

