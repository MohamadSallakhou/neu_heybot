name: CI/CD mit Docker-Scan

on:
  push:
    branches:
      - main

env:
  # GitHub Packages (GHCR) Registry
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository_owner }}/heybot
  IMAGE_BASE: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}

jobs:
  build-and-scan:
    name: Build, Scan & Push
    runs-on: ubuntu-latest

    steps:
      # 1) Code auschecken
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Buildx installieren (f체r multi-arch Builds, optional)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3) Anmeldung in GHCR
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # 4) Erstes Image bauen (wird lokal getaggt, aber noch nicht gepusht)
      - name: Build base image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          load: true                   # l채dt das Image in die lokale Docker-Daemon
          tags: |
            ${{ env.IMAGE_BASE }}:latest

      # 5) Trivy-Scan durchf체hren und Report speichern
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@v0.8.2
        with:
          image-ref: ${{ env.IMAGE_BASE }}:latest
          format: json
          output: trivy_output.json

      # 6) Trivy-Report als Artefakt hochladen
      - name: Upload Trivy report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: trivy_output.json

      # 7) Zweites Image bauen, das den Report enth채lt
      - name: Build image with Trivy report
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.trivy-analysis
          push: true
          tags: |
            ${{ env.IMAGE_BASE }}-with-trivy-output:latest

      # 8) Optional: Original-Image in GHCR pushen
      - name: Push base image
        if: always()
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_BASE }}:latest
