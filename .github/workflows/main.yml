name: CI/CD neu_heybotChat

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  USER_LOWER: ${{ toLower(github.actor) }}
  IMAGE_NAME: heybot
  ANALYSIS_IMAGE: heybot-with-trivy-output
  TAG: ${{ github.sha }}

jobs:
  build_and_scan:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout
      - uses: actions/checkout@v2

      # 2) Login zu GHCR
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # 3) Build & Push des heybot-Images
      - name: Build & Push Main Image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.USER_LOWER }}/${{ env.IMAGE_NAME }}:${{ env.TAG }} .
          docker push ${{ env.REGISTRY }}/${{ env.USER_LOWER }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}

      # 4) Trivy installieren & ausf√ºhren
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          version: '0.60.1'

      - name: Scan Main Image for Vulnerabilities
        run: |
          trivy image \
            --severity HIGH,CRITICAL \
            --format json \
            --exit-code 1 \
            --output trivy-report.json \
            ${{ env.REGISTRY }}/${{ env.USER_LOWER }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}

      # 5) Trivy-Report hochladen
      - name: Upload Trivy Report
        uses: ./.github/actions/upload-artifact
        with:
          name: trivy-report
          path: trivy-report.json

      # 6) Build & Push des Trivy-Analysis-Images
      - name: Build & Push Trivy-Analysis Image
        run: |
          docker build \
            -f Dockerfile.trivy-analysis \
            -t ${{ env.REGISTRY }}/${{ env.USER_LOWER }}/${{ env.ANALYSIS_IMAGE }}:${{ env.TAG }} \
            .
          docker push ${{ env.REGISTRY }}/${{ env.USER_LOWER }}/${{ env.ANALYSIS_IMAGE }}:${{ env.TAG }}
